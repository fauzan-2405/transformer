// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2021_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.295000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=539,HLS_VERSION=2021_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_dout,
        b_empty_n,
        b_read,
        res_din,
        res_full_n,
        res_write,
        a_address0,
        a_ce0,
        a_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] b_dout;
input   b_empty_n;
output   b_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;
output  [1:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_read;
reg res_write;
reg a_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln18_fu_540_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln18_2_fu_274_p3;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_11001;
reg    b_blk_n;
wire    ap_block_pp0_stage0;
reg    res_blk_n;
reg   [1:0] add_ln1819_reg_163;
reg   [0:0] icmp_ln2018_reg_177;
reg   [0:0] cmp817_reg_191;
reg   [1:0] j16_reg_205;
reg   [1:0] i3_reg_219;
reg   [3:0] indvar_flatten2_reg_233;
wire   [1:0] select_ln18_fu_247_p3;
reg   [1:0] select_ln18_reg_801;
wire   [1:0] i_fu_255_p3;
reg   [1:0] i_reg_808;
wire   [0:0] icmp_ln25_fu_282_p2;
reg   [0:0] icmp_ln25_reg_816;
wire   [3:0] add_ln18_1_fu_288_p2;
reg   [3:0] add_ln18_1_reg_828;
wire   [1:0] j_fu_516_p2;
reg   [1:0] j_reg_833;
wire   [0:0] cmp8_fu_522_p2;
reg   [0:0] cmp8_reg_838;
wire   [0:0] icmp_ln20_fu_528_p2;
reg   [0:0] icmp_ln20_reg_843;
wire   [1:0] add_ln18_fu_534_p2;
reg   [1:0] add_ln18_reg_848;
reg   [0:0] icmp_ln18_reg_853;
reg   [0:0] icmp_ln18_reg_853_pp0_iter1_reg;
reg   [0:0] icmp_ln18_reg_853_pp0_iter2_reg;
reg   [0:0] icmp_ln18_reg_853_pp0_iter3_reg;
reg   [0:0] icmp_ln18_reg_853_pp0_iter4_reg;
wire  signed [7:0] a_row_1_3_fu_586_p3;
reg  signed [7:0] a_row_1_3_reg_857;
wire  signed [7:0] a_row_0_3_fu_593_p3;
reg  signed [7:0] a_row_0_3_reg_862;
reg  signed [7:0] a_row_0_3_reg_862_pp0_iter2_reg;
wire   [7:0] tmp_1_fu_627_p5;
reg   [7:0] tmp_1_reg_867;
reg  signed [7:0] tmp_1_reg_867_pp0_iter2_reg;
wire   [7:0] tmp_2_fu_638_p5;
reg  signed [7:0] tmp_2_reg_872;
wire  signed [15:0] mul_ln37_fu_695_p2;
wire   [15:0] grp_fu_703_p3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [1:0] ap_phi_mux_add_ln1819_phi_fu_167_p6;
reg   [0:0] ap_phi_mux_icmp_ln2018_phi_fu_181_p6;
reg   [0:0] ap_phi_mux_cmp817_phi_fu_195_p6;
reg   [1:0] ap_phi_mux_j16_phi_fu_209_p6;
reg   [1:0] ap_phi_mux_i3_phi_fu_223_p6;
reg   [3:0] ap_phi_mux_indvar_flatten2_phi_fu_237_p6;
wire   [63:0] zext_ln18_fu_263_p1;
reg   [7:0] a_row_2_2_fu_74;
wire  signed [7:0] a_row_2_3_fu_579_p3;
reg   [7:0] a_row_1_2_fu_78;
reg   [7:0] a_row_0_fu_82;
reg   [7:0] b_copy_2_2_1_fu_86;
wire   [7:0] b_copy_2_2_5_fu_359_p3;
reg   [7:0] b_copy_2_2_2_fu_90;
wire   [7:0] b_copy_2_2_7_fu_375_p3;
reg   [7:0] b_copy_2_2_3_fu_94;
wire   [7:0] b_copy_2_2_9_fu_383_p3;
reg   [7:0] b_copy_1_2_1_fu_98;
wire   [7:0] b_copy_1_2_5_fu_399_p3;
reg   [7:0] b_copy_1_2_2_fu_102;
wire   [7:0] b_copy_1_2_7_fu_415_p3;
reg   [7:0] b_copy_1_2_3_fu_106;
wire   [7:0] b_copy_1_2_9_fu_423_p3;
reg   [7:0] b_copy_0_2_1_fu_110;
wire   [7:0] b_copy_0_2_5_fu_439_p3;
reg   [7:0] b_copy_0_2_2_fu_114;
wire   [7:0] b_copy_0_2_7_fu_455_p3;
reg   [7:0] b_copy_0_2_3_fu_118;
wire   [7:0] b_copy_0_2_9_fu_463_p3;
wire   [15:0] grp_fu_711_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] cmp8_mid1_fu_268_p2;
wire   [0:0] icmp_ln32_fu_345_p2;
wire   [7:0] b_copy_2_2_10_fu_335_p4;
wire   [7:0] b_copy_2_2_fu_351_p3;
wire   [7:0] b_copy_2_2_6_fu_367_p3;
wire   [7:0] b_copy_1_2_10_fu_325_p4;
wire   [7:0] b_copy_1_2_fu_391_p3;
wire   [7:0] b_copy_1_2_6_fu_407_p3;
wire   [7:0] b_copy_0_2_10_fu_321_p1;
wire   [7:0] b_copy_0_2_fu_431_p3;
wire   [7:0] b_copy_0_2_6_fu_447_p3;
wire   [7:0] a_row_2_fu_569_p4;
wire   [7:0] a_row_1_fu_559_p4;
wire   [7:0] a_row_0_2_fu_555_p1;
wire  signed [7:0] tmp_3_fu_653_p5;
reg    grp_fu_703_ce;
reg    grp_fu_711_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_169;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

matrixmul_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U1(
    .din0(b_copy_0_2_3_fu_118),
    .din1(b_copy_0_2_2_fu_114),
    .din2(b_copy_0_2_1_fu_110),
    .din3(select_ln18_reg_801),
    .dout(tmp_1_fu_627_p5)
);

matrixmul_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U2(
    .din0(b_copy_1_2_3_fu_106),
    .din1(b_copy_1_2_2_fu_102),
    .din2(b_copy_1_2_1_fu_98),
    .din3(select_ln18_reg_801),
    .dout(tmp_2_fu_638_p5)
);

matrixmul_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U3(
    .din0(b_copy_2_2_3_fu_94),
    .din1(b_copy_2_2_2_fu_90),
    .din2(b_copy_2_2_1_fu_86),
    .din3(select_ln18_reg_801),
    .dout(tmp_3_fu_653_p5)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U4(
    .din0(tmp_1_reg_867_pp0_iter2_reg),
    .din1(a_row_0_3_reg_862_pp0_iter2_reg),
    .dout(mul_ln37_fu_695_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_fu_653_p5),
    .din1(a_row_2_3_fu_579_p3),
    .din2(mul_ln37_fu_695_p2),
    .ce(grp_fu_703_ce),
    .dout(grp_fu_703_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_872),
    .din1(a_row_1_3_reg_857),
    .din2(grp_fu_703_p3),
    .ce(grp_fu_711_ce),
    .dout(grp_fu_711_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        add_ln1819_reg_163 <= add_ln18_reg_848;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        add_ln1819_reg_163 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        cmp817_reg_191 <= cmp8_reg_838;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cmp817_reg_191 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        i3_reg_219 <= i_reg_808;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i3_reg_219 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        icmp_ln2018_reg_177 <= icmp_ln20_reg_843;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        icmp_ln2018_reg_177 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        indvar_flatten2_reg_233 <= add_ln18_1_reg_828;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_233 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        j16_reg_205 <= j_reg_833;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        j16_reg_205 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_0_3_reg_862 <= a_row_0_3_fu_593_p3;
        a_row_1_3_reg_857 <= a_row_1_3_fu_586_p3;
        icmp_ln18_reg_853 <= icmp_ln18_fu_540_p2;
        icmp_ln18_reg_853_pp0_iter1_reg <= icmp_ln18_reg_853;
        icmp_ln25_reg_816 <= icmp_ln25_fu_282_p2;
        select_ln18_reg_801 <= select_ln18_fu_247_p3;
        tmp_1_reg_867 <= tmp_1_fu_627_p5;
        tmp_2_reg_872 <= tmp_2_fu_638_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_row_0_3_reg_862_pp0_iter2_reg <= a_row_0_3_reg_862;
        icmp_ln18_reg_853_pp0_iter2_reg <= icmp_ln18_reg_853_pp0_iter1_reg;
        icmp_ln18_reg_853_pp0_iter3_reg <= icmp_ln18_reg_853_pp0_iter2_reg;
        icmp_ln18_reg_853_pp0_iter4_reg <= icmp_ln18_reg_853_pp0_iter3_reg;
        tmp_1_reg_867_pp0_iter2_reg <= tmp_1_reg_867;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_853 == 1'd0))) begin
        a_row_0_fu_82 <= a_row_0_3_fu_593_p3;
        a_row_1_2_fu_78 <= a_row_1_3_fu_586_p3;
        a_row_2_2_fu_74 <= a_row_2_3_fu_579_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln18_1_reg_828 <= add_ln18_1_fu_288_p2;
        add_ln18_reg_848 <= add_ln18_fu_534_p2;
        cmp8_reg_838 <= cmp8_fu_522_p2;
        i_reg_808 <= i_fu_255_p3;
        icmp_ln20_reg_843 <= icmp_ln20_fu_528_p2;
        j_reg_833 <= j_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln18_2_fu_274_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_0_2_1_fu_110 <= b_copy_0_2_5_fu_439_p3;
        b_copy_0_2_2_fu_114 <= b_copy_0_2_7_fu_455_p3;
        b_copy_0_2_3_fu_118 <= b_copy_0_2_9_fu_463_p3;
        b_copy_1_2_1_fu_98 <= b_copy_1_2_5_fu_399_p3;
        b_copy_1_2_2_fu_102 <= b_copy_1_2_7_fu_415_p3;
        b_copy_1_2_3_fu_106 <= b_copy_1_2_9_fu_423_p3;
        b_copy_2_2_1_fu_86 <= b_copy_2_2_5_fu_359_p3;
        b_copy_2_2_2_fu_90 <= b_copy_2_2_7_fu_375_p3;
        b_copy_2_2_3_fu_94 <= b_copy_2_2_9_fu_383_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln18_reg_853_pp0_iter4_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_add_ln1819_phi_fu_167_p6 = 2'd1;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_add_ln1819_phi_fu_167_p6 = add_ln18_reg_848;
        end else begin
            ap_phi_mux_add_ln1819_phi_fu_167_p6 = add_ln1819_reg_163;
        end
    end else begin
        ap_phi_mux_add_ln1819_phi_fu_167_p6 = add_ln1819_reg_163;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_cmp817_phi_fu_195_p6 = 1'd1;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_cmp817_phi_fu_195_p6 = cmp8_reg_838;
        end else begin
            ap_phi_mux_cmp817_phi_fu_195_p6 = cmp817_reg_191;
        end
    end else begin
        ap_phi_mux_cmp817_phi_fu_195_p6 = cmp817_reg_191;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_i3_phi_fu_223_p6 = 2'd0;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_i3_phi_fu_223_p6 = i_reg_808;
        end else begin
            ap_phi_mux_i3_phi_fu_223_p6 = i3_reg_219;
        end
    end else begin
        ap_phi_mux_i3_phi_fu_223_p6 = i3_reg_219;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_icmp_ln2018_phi_fu_181_p6 = 1'd0;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_icmp_ln2018_phi_fu_181_p6 = icmp_ln20_reg_843;
        end else begin
            ap_phi_mux_icmp_ln2018_phi_fu_181_p6 = icmp_ln2018_reg_177;
        end
    end else begin
        ap_phi_mux_icmp_ln2018_phi_fu_181_p6 = icmp_ln2018_reg_177;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_237_p6 = 4'd0;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_237_p6 = add_ln18_1_reg_828;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_237_p6 = indvar_flatten2_reg_233;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_237_p6 = indvar_flatten2_reg_233;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_169)) begin
        if ((icmp_ln18_reg_853 == 1'd1)) begin
            ap_phi_mux_j16_phi_fu_209_p6 = 2'd0;
        end else if ((icmp_ln18_reg_853 == 1'd0)) begin
            ap_phi_mux_j16_phi_fu_209_p6 = j_reg_833;
        end else begin
            ap_phi_mux_j16_phi_fu_209_p6 = j16_reg_205;
        end
    end else begin
        ap_phi_mux_j16_phi_fu_209_p6 = j16_reg_205;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (icmp_ln18_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln18_2_fu_274_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln18_2_fu_274_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_703_ce = 1'b1;
    end else begin
        grp_fu_703_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_711_ce = 1'b1;
    end else begin
        grp_fu_711_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln18_fu_263_p1;

assign a_row_0_2_fu_555_p1 = a_q0[7:0];

assign a_row_0_3_fu_593_p3 = ((icmp_ln25_reg_816[0:0] == 1'b1) ? a_row_0_2_fu_555_p1 : a_row_0_fu_82);

assign a_row_1_3_fu_586_p3 = ((icmp_ln25_reg_816[0:0] == 1'b1) ? a_row_1_fu_559_p4 : a_row_1_2_fu_78);

assign a_row_1_fu_559_p4 = {{a_q0[15:8]}};

assign a_row_2_3_fu_579_p3 = ((icmp_ln25_reg_816[0:0] == 1'b1) ? a_row_2_fu_569_p4 : a_row_2_2_fu_74);

assign a_row_2_fu_569_p4 = {{a_q0[23:16]}};

assign add_ln18_1_fu_288_p2 = (ap_phi_mux_indvar_flatten2_phi_fu_237_p6 + 4'd1);

assign add_ln18_fu_534_p2 = (i_fu_255_p3 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (res_full_n == 1'b0)) | ((select_ln18_2_fu_274_p3 == 1'd1) & (b_empty_n == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (res_full_n == 1'b0)) | ((select_ln18_2_fu_274_p3 == 1'd1) & (b_empty_n == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (res_full_n == 1'b0)) | ((select_ln18_2_fu_274_p3 == 1'd1) & (b_empty_n == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((select_ln18_2_fu_274_p3 == 1'd1) & (b_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = (res_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_169 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign b_copy_0_2_10_fu_321_p1 = b_dout[7:0];

assign b_copy_0_2_5_fu_439_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_0_2_1_fu_110 : b_copy_0_2_fu_431_p3);

assign b_copy_0_2_6_fu_447_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_0_2_10_fu_321_p1 : b_copy_0_2_2_fu_114);

assign b_copy_0_2_7_fu_455_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_0_2_2_fu_114 : b_copy_0_2_6_fu_447_p3);

assign b_copy_0_2_9_fu_463_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_0_2_10_fu_321_p1 : b_copy_0_2_3_fu_118);

assign b_copy_0_2_fu_431_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_0_2_1_fu_110 : b_copy_0_2_10_fu_321_p1);

assign b_copy_1_2_10_fu_325_p4 = {{b_dout[15:8]}};

assign b_copy_1_2_5_fu_399_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_1_2_1_fu_98 : b_copy_1_2_fu_391_p3);

assign b_copy_1_2_6_fu_407_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_1_2_10_fu_325_p4 : b_copy_1_2_2_fu_102);

assign b_copy_1_2_7_fu_415_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_1_2_2_fu_102 : b_copy_1_2_6_fu_407_p3);

assign b_copy_1_2_9_fu_423_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_1_2_10_fu_325_p4 : b_copy_1_2_3_fu_106);

assign b_copy_1_2_fu_391_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_1_2_1_fu_98 : b_copy_1_2_10_fu_325_p4);

assign b_copy_2_2_10_fu_335_p4 = {{b_dout[23:16]}};

assign b_copy_2_2_5_fu_359_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_2_2_1_fu_86 : b_copy_2_2_fu_351_p3);

assign b_copy_2_2_6_fu_367_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_2_2_10_fu_335_p4 : b_copy_2_2_2_fu_90);

assign b_copy_2_2_7_fu_375_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_2_2_2_fu_90 : b_copy_2_2_6_fu_367_p3);

assign b_copy_2_2_9_fu_383_p3 = ((icmp_ln25_fu_282_p2[0:0] == 1'b1) ? b_copy_2_2_10_fu_335_p4 : b_copy_2_2_3_fu_94);

assign b_copy_2_2_fu_351_p3 = ((icmp_ln32_fu_345_p2[0:0] == 1'b1) ? b_copy_2_2_1_fu_86 : b_copy_2_2_10_fu_335_p4);

assign cmp8_fu_522_p2 = ((i_fu_255_p3 == 2'd0) ? 1'b1 : 1'b0);

assign cmp8_mid1_fu_268_p2 = ((ap_phi_mux_add_ln1819_phi_fu_167_p6 == 2'd0) ? 1'b1 : 1'b0);

assign i_fu_255_p3 = ((ap_phi_mux_icmp_ln2018_phi_fu_181_p6[0:0] == 1'b1) ? ap_phi_mux_add_ln1819_phi_fu_167_p6 : ap_phi_mux_i3_phi_fu_223_p6);

assign icmp_ln18_fu_540_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_237_p6 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_528_p2 = ((j_fu_516_p2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_282_p2 = ((select_ln18_fu_247_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_345_p2 = ((select_ln18_fu_247_p3 == 2'd1) ? 1'b1 : 1'b0);

assign j_fu_516_p2 = (select_ln18_fu_247_p3 + 2'd1);

assign res_din = grp_fu_711_p3;

assign select_ln18_2_fu_274_p3 = ((ap_phi_mux_icmp_ln2018_phi_fu_181_p6[0:0] == 1'b1) ? cmp8_mid1_fu_268_p2 : ap_phi_mux_cmp817_phi_fu_195_p6);

assign select_ln18_fu_247_p3 = ((ap_phi_mux_icmp_ln2018_phi_fu_181_p6[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_j16_phi_fu_209_p6);

assign zext_ln18_fu_263_p1 = i_fu_255_p3;

endmodule //matrixmul
